{"version":3,"sources":["components/DatatablePage.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","DatatablePage","props","striped","bordered","hover","data","Header","App","state","investments","stripHTML","bind","str","el","document","createElement","innerHTML","textContent","axios","get","then","res","investmentArr","setState","geography","industry","columns","label","field","sort","width","rows","this","map","item","company","post_title","description","post_content","country","categories","filter","category","exited","website","url","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8VAIA,IAAMA,EAAYC,IAAOC,IAAV,KAkBAC,EAbO,SAACC,GACnB,OACI,kBAACJ,EAAD,KACI,kBAAC,IAAD,CACIK,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,KAAQJ,EAAMI,S,uJCb9B,IAAMR,EAAYC,IAAOC,IAAV,KAcAO,EARA,WACX,OACI,kBAAC,EAAD,KACI,4BAAI,gEC6GDC,E,kDAjHd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,YAAa,IAEd,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALC,E,sDAQTC,GACN,IAAIC,EAAKC,SAASC,cAAc,OAEhC,OADAF,EAAGG,UAAYJ,EACRC,EAAGI,c,2CAGQ,IAAD,OACpBC,IAAMC,IAAI,gCACRC,MAAK,SAAAC,GACL,IAAIC,EAAgBD,EAAIhB,KACxB,EAAKkB,SAAS,CACbd,YAAY,GAAD,mBAAM,EAAKD,MAAMC,aAAjB,YAAiCa,W,+BAKtC,IAAD,OACFE,EAAY,CACjB,EAAI,SACJ,GAAK,UACL,GAAK,UACL,GAAK,cACL,GAAK,UACL,GAAK,SACL,GAAK,UACL,GAAK,UACL,GAAK,SACL,GAAK,cACL,GAAK,QACL,GAAK,cACL,GAAK,iBACL,GAAK,MACL,GAAK,QACL,GAAK,UAGAC,EAAW,CAChB,EAAI,YACJ,EAAI,iBACJ,GAAK,WACL,GAAK,gBACL,GAAK,QACL,GAAK,yBACL,GAAK,WACL,GAAK,WAGEpB,EAAO,CACXqB,QAAS,CACP,CACEC,MAAO,UACPC,MAAO,UACPC,KAAM,MACNC,MAAO,OAET,CACEH,MAAO,cACPC,MAAO,cACPC,KAAM,MACNC,MAAO,OAET,CACEH,MAAO,UACPC,MAAO,UACPC,KAAM,MACNC,MAAO,OAET,CACEH,MAAO,WACPC,MAAO,WACPC,KAAM,MACNC,MAAO,OAET,CACEH,MAAO,SACPC,MAAO,SACPC,KAAM,MACNC,MAAO,MAET,CACEH,MAAO,UACPC,MAAO,UACPC,KAAM,MACNC,MAAO,QAGXC,KAAMC,KAAKxB,MAAMC,YAAYwB,KAAI,SAAAC,GAAI,MAAK,CACxCC,QAASD,EAAKE,WACdC,YAAa,EAAK3B,UAAUwB,EAAKI,cACjCC,QAASf,EAAUU,EAAKM,WAAWC,QAAO,SAAAC,GAAQ,OAAIlB,EAAUkB,OAChEA,SAAUjB,EAASS,EAAKM,WAAWC,QAAO,SAAAC,GAAQ,OAAIjB,EAASiB,OAC/DC,OAAQT,EAAKS,OAAS,OAAS,QAC/BC,QAASV,EAAKW,SAIpB,OACI,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAexC,KAAMA,S,GA5GXyC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1f0e044a.chunk.js","sourcesContent":["import React from 'react'\r\nimport {MDBDataTable} from 'mdbreact'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n    margin: 20px;\r\n    padding: 5px\r\n`\r\n\r\nconst DatatablePage = (props) => {\r\n    return (\r\n        <Container>\r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                hover\r\n                data = {props.data}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default DatatablePage","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n    text-align: center;\r\n    background-color: whitesmoke;\r\n`\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Container>\r\n            <h1><strong>Kreos Portfolio Companies</strong></h1>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\nimport axios from 'axios'\nimport {MDBDataTable} from 'mdbreact'\n\nimport DatatablePage from './components/DatatablePage'\nimport Header from './components/Header'\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tinvestments: []\n\t\t}\n\t\tthis.stripHTML = this.stripHTML.bind(this)\n\t}\n\n\tstripHTML(str){\n\t    let el = document.createElement(\"div\");\n\t    el.innerHTML = str;\n\t    return el.textContent;\n\t };\n\n\tcomponentWillMount() {\n\t\taxios.get('https://kreos.herokuapp.com/')\n\t\t\t.then(res => {\n\t\t\t\tlet investmentArr = res.data\n\t\t\t\tthis.setState({\n\t\t\t\t\tinvestments: [...this.state.investments, ...investmentArr]\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\trender() {\n\t\tconst geography = {\n\t\t\t\"6\":\"Sweden\", \n\t\t\t\"15\":\"Austria\", \n\t\t\t\"16\":\"Belgium\", \n\t\t\t\"18\":\"Netherlands\", \n\t\t\t\"19\":\"Finland\", \n\t\t\t\"20\":\"France\", \n\t\t\t\"21\":\"Germany\", \n\t\t\t\"22\":\"Ireland\", \n\t\t\t\"23\":\"Israel\", \n\t\t\t\"24\":\"Netherlands\", \n\t\t\t\"25\":\"Spain\", \n\t\t\t\"26\":\"Switzerland\", \n\t\t\t\"27\":\"United Kingdom\", \n\t\t\t\"28\":\"USA\", \n\t\t\t\"31\":\"Italy\", \n\t\t\t\"33\":\"Poland\"\n\t\t};\n\n\t\tconst industry = {\n\t\t\t\"8\":\"Cleantech\", \n\t\t\t\"9\":\"Communications\", \n\t\t\t\"10\":\"Consumer\", \n\t\t\t\"11\":\"Life Sciences\", \n\t\t\t\"12\":\"Other\", \n\t\t\t\"13\":\"Semiconductor/Hardware\", \n\t\t\t\"14\":\"Software\", \n\t\t\t\"56\":\"Fintech\"\n    };\n    \n    const data = {\n      columns: [\n        {\n          label: 'Company',\n          field: 'company',\n          sort: 'asc',\n          width: '200'\n        },\n        {\n          label: 'Description',\n          field: 'description',\n          sort: 'asc',\n          width: '250'\n        },\n        {\n          label: 'Country',\n          field: 'country',\n          sort: 'asc',\n          width: '100'\n        }, \n        {\n          label: 'Category',\n          field: 'category',\n          sort: 'asc',\n          width: '100'\n        },\n        {\n          label: 'Exited',\n          field: 'exited',\n          sort: 'asc',\n          width: '50'\n        },\n        {\n          label: 'Website',\n          field: 'website',\n          sort: 'asc',\n          width: '100'\n        },         \n      ],\n      rows: this.state.investments.map(item => ({\n        company: item.post_title,\n        description: this.stripHTML(item.post_content),\n        country: geography[item.categories.filter(category => geography[category])],\n        category: industry[item.categories.filter(category => industry[category])],\n        exited: item.exited ? 'true' : 'false',\n        website: item.url\n      }))\n    }\n\n\t\treturn (\n      <div>\n        <Header />\n        <DatatablePage data={data}/>\n      </div>\n\t\t)\n\t}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; import\n'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}